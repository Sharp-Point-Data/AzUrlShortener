@page "/Webhooks"
@using adminBlazorWebsite.Data
@inject UrlShortenerService UrlService
@inject IJSRuntime JSRuntime;
@attribute [Authorize(Roles = "admin")]


@if (WebhookList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary"
            @onclick="CreateWebhook">
        Add New Webhook
    </button>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Url</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var url in WebhookList.UrlList)
            {
            <tr>
                <td>@url.RowKey</td>
                <td>
                    <span title="@url.Url">@url.GetDisplayableUrl()</span>
                </td>
                <td><button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => EditWebhook(url))">Edit</button></td>
                <td><button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => DeleteWebhook(url))">Delete</button></td>
            </tr>
            }
        </tbody>
    </table>
    <p>
        <!-- Add a new ShortUrl -->
        <button class="btn btn-primary"
                @onclick="CreateWebhook">
            Add New Webhook
        </button>
    </p>
}

@if (ShowCreatePopup)
{
    <Modal Title="Short Url Request" ClosePopup="ClosePopup">
        <EditForm Model="request" OnValidSubmit="SaveWebhook">
            <DataAnnotationsValidator />
            <div>
                <label for="url">Url</label>
                <InputText id="url" class="form-control" placeholder="Webhook url" @bind-Value="request.Url" />
                <ValidationMessage For="@(() => request.Url)" />
            </div>
            <br />
            <button class="btn btn-primary" type="submit">
                Save
            </button>
        </EditForm>
    </Modal>
}

@if (ShowEditPopup)
{
    <Modal Title="Short Url Request" ClosePopup="ClosePopup">
        <EditForm Model="editedWebhook" OnValidSubmit="SaveUpdatedWebhook">
            <DataAnnotationsValidator />
            <div>
                <label for="url">Url</label>
                <InputText id="url" class="form-control" placeholder="Webhook url" @bind-Value="editedWebhook.Url" />
                <ValidationMessage For="@(() => editedWebhook.Url)" />
            </div>
            <br />
            <button class="btn btn-primary" type="submit">
                Save
            </button>
        </EditForm>
    </Modal>
}


@code
{
    bool ShowCreatePopup = false;
    bool ShowEditPopup = false;
    WebhookRequest request = new WebhookRequest();
    WebhookEntity editedWebhook;
    WebhookList WebhookList;

    void ClosePopup()
    {
        ShowCreatePopup = false;
        ShowEditPopup = false;
    }

    private async Task SaveWebhook()
    {
        ShowCreatePopup = false;
        WebhookList = await UrlService.CreateWebhook(request);
    }

    private async Task DeleteWebhook(WebhookEntity webhook)
    {
        WebhookList = await UrlService.DeleteWebhook(webhook);
    }

    private async Task SaveUpdatedWebhook()
    {
        ShowEditPopup = false;
        WebhookList = await UrlService.UpdateWebhook(editedWebhook);
        editedWebhook = null;
    }

    private async Task EditWebhook(WebhookEntity webhook)
    {
        editedWebhook = webhook;
        ShowEditPopup = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        WebhookList = await UrlService.GetWebhookList();
    }

    [Authorize(Roles = "admin")]
    void CreateWebhook()
    {
        request = new WebhookRequest();
        ShowCreatePopup = true;
    }

}